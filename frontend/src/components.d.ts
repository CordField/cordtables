/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { MatchResults, RouterHistory } from "@stencil/router";
import { ActionType } from "./common/types";
import { ColumnDescription } from "./common/table-abstractions/types";
import { MenuClickedEvent } from "./components/header/types";
export namespace Components {
    interface AdminUsers {
    }
    interface AppHome {
    }
    interface AppProfile {
        "match": MatchResults;
    }
    interface AppRoot {
        "history": RouterHistory;
    }
    interface CfAction {
        "actionFn": (value: any) => Promise<boolean>;
        "actionType": ActionType;
        "text": any;
        "value": any;
    }
    interface CfCell {
        "isEditable": boolean;
        "options"?: Array<string>;
        "propKey": keyof any;
        "rowId": number;
        "type"?: string;
        "updateFn": (id: number, columnName: any, value: any) => Promise<boolean>;
        "value": any;
    }
    interface CfCell2 {
        "columnDescription": ColumnDescription;
        "isHeader": boolean;
        "rowId": number;
        "value": any;
    }
    interface CfHeader {
        "history": RouterHistory;
    }
    interface CfHeaderMenu {
        "history": RouterHistory;
    }
    interface CfLogin {
        "history": RouterHistory;
    }
    interface CfRegister {
        "history": RouterHistory;
    }
    interface CfRow {
        "columnData": ColumnDescription[];
        "row": any;
    }
    interface CfTable {
        "columnData": ColumnDescription[];
        "rowData": any[];
    }
    interface CfTableBody {
        "columnData": ColumnDescription[];
        "rowData": any[];
    }
    interface CfTableFooter {
    }
    interface CommonOrganizations {
    }
    interface CreateUpdateModal {
        "isOpen": boolean;
        "modalTitle": String;
    }
    interface GenericTable {
        "columns": Array<any>;
        "name": String;
        "values": Array<any>;
    }
    interface GroupMemberships {
    }
    interface GroupsPage {
    }
    interface GroupsRowAccess {
    }
    interface GroupsTable {
    }
    interface LanguagesEx {
    }
    interface OrganizationsPage {
    }
    interface PageRoot {
        "match": MatchResults;
    }
    interface PeopleTable {
    }
    interface RoleColumnGrants {
        "history": RouterHistory;
    }
    interface RoleMemberships {
    }
    interface RoleTablePermissions {
    }
    interface RolesPage {
    }
    interface RolesTable {
    }
    interface ScLanguages {
    }
    interface ScriptureReferences {
    }
    interface TableRoot {
        "match": MatchResults;
    }
}
declare global {
    interface HTMLAdminUsersElement extends Components.AdminUsers, HTMLStencilElement {
    }
    var HTMLAdminUsersElement: {
        prototype: HTMLAdminUsersElement;
        new (): HTMLAdminUsersElement;
    };
    interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {
    }
    var HTMLAppHomeElement: {
        prototype: HTMLAppHomeElement;
        new (): HTMLAppHomeElement;
    };
    interface HTMLAppProfileElement extends Components.AppProfile, HTMLStencilElement {
    }
    var HTMLAppProfileElement: {
        prototype: HTMLAppProfileElement;
        new (): HTMLAppProfileElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLCfActionElement extends Components.CfAction, HTMLStencilElement {
    }
    var HTMLCfActionElement: {
        prototype: HTMLCfActionElement;
        new (): HTMLCfActionElement;
    };
    interface HTMLCfCellElement extends Components.CfCell, HTMLStencilElement {
    }
    var HTMLCfCellElement: {
        prototype: HTMLCfCellElement;
        new (): HTMLCfCellElement;
    };
    interface HTMLCfCell2Element extends Components.CfCell2, HTMLStencilElement {
    }
    var HTMLCfCell2Element: {
        prototype: HTMLCfCell2Element;
        new (): HTMLCfCell2Element;
    };
    interface HTMLCfHeaderElement extends Components.CfHeader, HTMLStencilElement {
    }
    var HTMLCfHeaderElement: {
        prototype: HTMLCfHeaderElement;
        new (): HTMLCfHeaderElement;
    };
    interface HTMLCfHeaderMenuElement extends Components.CfHeaderMenu, HTMLStencilElement {
    }
    var HTMLCfHeaderMenuElement: {
        prototype: HTMLCfHeaderMenuElement;
        new (): HTMLCfHeaderMenuElement;
    };
    interface HTMLCfLoginElement extends Components.CfLogin, HTMLStencilElement {
    }
    var HTMLCfLoginElement: {
        prototype: HTMLCfLoginElement;
        new (): HTMLCfLoginElement;
    };
    interface HTMLCfRegisterElement extends Components.CfRegister, HTMLStencilElement {
    }
    var HTMLCfRegisterElement: {
        prototype: HTMLCfRegisterElement;
        new (): HTMLCfRegisterElement;
    };
    interface HTMLCfRowElement extends Components.CfRow, HTMLStencilElement {
    }
    var HTMLCfRowElement: {
        prototype: HTMLCfRowElement;
        new (): HTMLCfRowElement;
    };
    interface HTMLCfTableElement extends Components.CfTable, HTMLStencilElement {
    }
    var HTMLCfTableElement: {
        prototype: HTMLCfTableElement;
        new (): HTMLCfTableElement;
    };
    interface HTMLCfTableBodyElement extends Components.CfTableBody, HTMLStencilElement {
    }
    var HTMLCfTableBodyElement: {
        prototype: HTMLCfTableBodyElement;
        new (): HTMLCfTableBodyElement;
    };
    interface HTMLCfTableFooterElement extends Components.CfTableFooter, HTMLStencilElement {
    }
    var HTMLCfTableFooterElement: {
        prototype: HTMLCfTableFooterElement;
        new (): HTMLCfTableFooterElement;
    };
    interface HTMLCommonOrganizationsElement extends Components.CommonOrganizations, HTMLStencilElement {
    }
    var HTMLCommonOrganizationsElement: {
        prototype: HTMLCommonOrganizationsElement;
        new (): HTMLCommonOrganizationsElement;
    };
    interface HTMLCreateUpdateModalElement extends Components.CreateUpdateModal, HTMLStencilElement {
    }
    var HTMLCreateUpdateModalElement: {
        prototype: HTMLCreateUpdateModalElement;
        new (): HTMLCreateUpdateModalElement;
    };
    interface HTMLGenericTableElement extends Components.GenericTable, HTMLStencilElement {
    }
    var HTMLGenericTableElement: {
        prototype: HTMLGenericTableElement;
        new (): HTMLGenericTableElement;
    };
    interface HTMLGroupMembershipsElement extends Components.GroupMemberships, HTMLStencilElement {
    }
    var HTMLGroupMembershipsElement: {
        prototype: HTMLGroupMembershipsElement;
        new (): HTMLGroupMembershipsElement;
    };
    interface HTMLGroupsPageElement extends Components.GroupsPage, HTMLStencilElement {
    }
    var HTMLGroupsPageElement: {
        prototype: HTMLGroupsPageElement;
        new (): HTMLGroupsPageElement;
    };
    interface HTMLGroupsRowAccessElement extends Components.GroupsRowAccess, HTMLStencilElement {
    }
    var HTMLGroupsRowAccessElement: {
        prototype: HTMLGroupsRowAccessElement;
        new (): HTMLGroupsRowAccessElement;
    };
    interface HTMLGroupsTableElement extends Components.GroupsTable, HTMLStencilElement {
    }
    var HTMLGroupsTableElement: {
        prototype: HTMLGroupsTableElement;
        new (): HTMLGroupsTableElement;
    };
    interface HTMLLanguagesExElement extends Components.LanguagesEx, HTMLStencilElement {
    }
    var HTMLLanguagesExElement: {
        prototype: HTMLLanguagesExElement;
        new (): HTMLLanguagesExElement;
    };
    interface HTMLOrganizationsPageElement extends Components.OrganizationsPage, HTMLStencilElement {
    }
    var HTMLOrganizationsPageElement: {
        prototype: HTMLOrganizationsPageElement;
        new (): HTMLOrganizationsPageElement;
    };
    interface HTMLPageRootElement extends Components.PageRoot, HTMLStencilElement {
    }
    var HTMLPageRootElement: {
        prototype: HTMLPageRootElement;
        new (): HTMLPageRootElement;
    };
    interface HTMLPeopleTableElement extends Components.PeopleTable, HTMLStencilElement {
    }
    var HTMLPeopleTableElement: {
        prototype: HTMLPeopleTableElement;
        new (): HTMLPeopleTableElement;
    };
    interface HTMLRoleColumnGrantsElement extends Components.RoleColumnGrants, HTMLStencilElement {
    }
    var HTMLRoleColumnGrantsElement: {
        prototype: HTMLRoleColumnGrantsElement;
        new (): HTMLRoleColumnGrantsElement;
    };
    interface HTMLRoleMembershipsElement extends Components.RoleMemberships, HTMLStencilElement {
    }
    var HTMLRoleMembershipsElement: {
        prototype: HTMLRoleMembershipsElement;
        new (): HTMLRoleMembershipsElement;
    };
    interface HTMLRoleTablePermissionsElement extends Components.RoleTablePermissions, HTMLStencilElement {
    }
    var HTMLRoleTablePermissionsElement: {
        prototype: HTMLRoleTablePermissionsElement;
        new (): HTMLRoleTablePermissionsElement;
    };
    interface HTMLRolesPageElement extends Components.RolesPage, HTMLStencilElement {
    }
    var HTMLRolesPageElement: {
        prototype: HTMLRolesPageElement;
        new (): HTMLRolesPageElement;
    };
    interface HTMLRolesTableElement extends Components.RolesTable, HTMLStencilElement {
    }
    var HTMLRolesTableElement: {
        prototype: HTMLRolesTableElement;
        new (): HTMLRolesTableElement;
    };
    interface HTMLScLanguagesElement extends Components.ScLanguages, HTMLStencilElement {
    }
    var HTMLScLanguagesElement: {
        prototype: HTMLScLanguagesElement;
        new (): HTMLScLanguagesElement;
    };
    interface HTMLScriptureReferencesElement extends Components.ScriptureReferences, HTMLStencilElement {
    }
    var HTMLScriptureReferencesElement: {
        prototype: HTMLScriptureReferencesElement;
        new (): HTMLScriptureReferencesElement;
    };
    interface HTMLTableRootElement extends Components.TableRoot, HTMLStencilElement {
    }
    var HTMLTableRootElement: {
        prototype: HTMLTableRootElement;
        new (): HTMLTableRootElement;
    };
    interface HTMLElementTagNameMap {
        "admin-users": HTMLAdminUsersElement;
        "app-home": HTMLAppHomeElement;
        "app-profile": HTMLAppProfileElement;
        "app-root": HTMLAppRootElement;
        "cf-action": HTMLCfActionElement;
        "cf-cell": HTMLCfCellElement;
        "cf-cell2": HTMLCfCell2Element;
        "cf-header": HTMLCfHeaderElement;
        "cf-header-menu": HTMLCfHeaderMenuElement;
        "cf-login": HTMLCfLoginElement;
        "cf-register": HTMLCfRegisterElement;
        "cf-row": HTMLCfRowElement;
        "cf-table": HTMLCfTableElement;
        "cf-table-body": HTMLCfTableBodyElement;
        "cf-table-footer": HTMLCfTableFooterElement;
        "common-organizations": HTMLCommonOrganizationsElement;
        "create-update-modal": HTMLCreateUpdateModalElement;
        "generic-table": HTMLGenericTableElement;
        "group-memberships": HTMLGroupMembershipsElement;
        "groups-page": HTMLGroupsPageElement;
        "groups-row-access": HTMLGroupsRowAccessElement;
        "groups-table": HTMLGroupsTableElement;
        "languages-ex": HTMLLanguagesExElement;
        "organizations-page": HTMLOrganizationsPageElement;
        "page-root": HTMLPageRootElement;
        "people-table": HTMLPeopleTableElement;
        "role-column-grants": HTMLRoleColumnGrantsElement;
        "role-memberships": HTMLRoleMembershipsElement;
        "role-table-permissions": HTMLRoleTablePermissionsElement;
        "roles-page": HTMLRolesPageElement;
        "roles-table": HTMLRolesTableElement;
        "sc-languages": HTMLScLanguagesElement;
        "scripture-references": HTMLScriptureReferencesElement;
        "table-root": HTMLTableRootElement;
    }
}
declare namespace LocalJSX {
    interface AdminUsers {
    }
    interface AppHome {
    }
    interface AppProfile {
        "match"?: MatchResults;
    }
    interface AppRoot {
        "history"?: RouterHistory;
    }
    interface CfAction {
        "actionFn"?: (value: any) => Promise<boolean>;
        "actionType"?: ActionType;
        "text"?: any;
        "value"?: any;
    }
    interface CfCell {
        "isEditable"?: boolean;
        "options"?: Array<string>;
        "propKey"?: keyof any;
        "rowId"?: number;
        "type"?: string;
        "updateFn"?: (id: number, columnName: any, value: any) => Promise<boolean>;
        "value"?: any;
    }
    interface CfCell2 {
        "columnDescription"?: ColumnDescription;
        "isHeader"?: boolean;
        "rowId"?: number;
        "value"?: any;
    }
    interface CfHeader {
        "history"?: RouterHistory;
    }
    interface CfHeaderMenu {
        "history"?: RouterHistory;
        "onMenuClicked"?: (event: CustomEvent<MenuClickedEvent>) => void;
    }
    interface CfLogin {
        "history"?: RouterHistory;
    }
    interface CfRegister {
        "history"?: RouterHistory;
    }
    interface CfRow {
        "columnData"?: ColumnDescription[];
        "row"?: any;
    }
    interface CfTable {
        "columnData"?: ColumnDescription[];
        "rowData"?: any[];
    }
    interface CfTableBody {
        "columnData"?: ColumnDescription[];
        "rowData"?: any[];
    }
    interface CfTableFooter {
    }
    interface CommonOrganizations {
    }
    interface CreateUpdateModal {
        "isOpen"?: boolean;
        "modalTitle"?: String;
        "onModalClosed"?: (event: CustomEvent<boolean>) => void;
        "onModalDelete"?: (event: CustomEvent<boolean>) => void;
        "onModalOkay"?: (event: CustomEvent<boolean>) => void;
    }
    interface GenericTable {
        "columns"?: Array<any>;
        "name"?: String;
        "onRowClicked"?: (event: CustomEvent<number>) => void;
        "values"?: Array<any>;
    }
    interface GroupMemberships {
    }
    interface GroupsPage {
    }
    interface GroupsRowAccess {
    }
    interface GroupsTable {
    }
    interface LanguagesEx {
    }
    interface OrganizationsPage {
    }
    interface PageRoot {
        "match"?: MatchResults;
    }
    interface PeopleTable {
    }
    interface RoleColumnGrants {
        "history"?: RouterHistory;
    }
    interface RoleMemberships {
    }
    interface RoleTablePermissions {
    }
    interface RolesPage {
    }
    interface RolesTable {
    }
    interface ScLanguages {
    }
    interface ScriptureReferences {
    }
    interface TableRoot {
        "match"?: MatchResults;
    }
    interface IntrinsicElements {
        "admin-users": AdminUsers;
        "app-home": AppHome;
        "app-profile": AppProfile;
        "app-root": AppRoot;
        "cf-action": CfAction;
        "cf-cell": CfCell;
        "cf-cell2": CfCell2;
        "cf-header": CfHeader;
        "cf-header-menu": CfHeaderMenu;
        "cf-login": CfLogin;
        "cf-register": CfRegister;
        "cf-row": CfRow;
        "cf-table": CfTable;
        "cf-table-body": CfTableBody;
        "cf-table-footer": CfTableFooter;
        "common-organizations": CommonOrganizations;
        "create-update-modal": CreateUpdateModal;
        "generic-table": GenericTable;
        "group-memberships": GroupMemberships;
        "groups-page": GroupsPage;
        "groups-row-access": GroupsRowAccess;
        "groups-table": GroupsTable;
        "languages-ex": LanguagesEx;
        "organizations-page": OrganizationsPage;
        "page-root": PageRoot;
        "people-table": PeopleTable;
        "role-column-grants": RoleColumnGrants;
        "role-memberships": RoleMemberships;
        "role-table-permissions": RoleTablePermissions;
        "roles-page": RolesPage;
        "roles-table": RolesTable;
        "sc-languages": ScLanguages;
        "scripture-references": ScriptureReferences;
        "table-root": TableRoot;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "admin-users": LocalJSX.AdminUsers & JSXBase.HTMLAttributes<HTMLAdminUsersElement>;
            "app-home": LocalJSX.AppHome & JSXBase.HTMLAttributes<HTMLAppHomeElement>;
            "app-profile": LocalJSX.AppProfile & JSXBase.HTMLAttributes<HTMLAppProfileElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "cf-action": LocalJSX.CfAction & JSXBase.HTMLAttributes<HTMLCfActionElement>;
            "cf-cell": LocalJSX.CfCell & JSXBase.HTMLAttributes<HTMLCfCellElement>;
            "cf-cell2": LocalJSX.CfCell2 & JSXBase.HTMLAttributes<HTMLCfCell2Element>;
            "cf-header": LocalJSX.CfHeader & JSXBase.HTMLAttributes<HTMLCfHeaderElement>;
            "cf-header-menu": LocalJSX.CfHeaderMenu & JSXBase.HTMLAttributes<HTMLCfHeaderMenuElement>;
            "cf-login": LocalJSX.CfLogin & JSXBase.HTMLAttributes<HTMLCfLoginElement>;
            "cf-register": LocalJSX.CfRegister & JSXBase.HTMLAttributes<HTMLCfRegisterElement>;
            "cf-row": LocalJSX.CfRow & JSXBase.HTMLAttributes<HTMLCfRowElement>;
            "cf-table": LocalJSX.CfTable & JSXBase.HTMLAttributes<HTMLCfTableElement>;
            "cf-table-body": LocalJSX.CfTableBody & JSXBase.HTMLAttributes<HTMLCfTableBodyElement>;
            "cf-table-footer": LocalJSX.CfTableFooter & JSXBase.HTMLAttributes<HTMLCfTableFooterElement>;
            "common-organizations": LocalJSX.CommonOrganizations & JSXBase.HTMLAttributes<HTMLCommonOrganizationsElement>;
            "create-update-modal": LocalJSX.CreateUpdateModal & JSXBase.HTMLAttributes<HTMLCreateUpdateModalElement>;
            "generic-table": LocalJSX.GenericTable & JSXBase.HTMLAttributes<HTMLGenericTableElement>;
            "group-memberships": LocalJSX.GroupMemberships & JSXBase.HTMLAttributes<HTMLGroupMembershipsElement>;
            "groups-page": LocalJSX.GroupsPage & JSXBase.HTMLAttributes<HTMLGroupsPageElement>;
            "groups-row-access": LocalJSX.GroupsRowAccess & JSXBase.HTMLAttributes<HTMLGroupsRowAccessElement>;
            "groups-table": LocalJSX.GroupsTable & JSXBase.HTMLAttributes<HTMLGroupsTableElement>;
            "languages-ex": LocalJSX.LanguagesEx & JSXBase.HTMLAttributes<HTMLLanguagesExElement>;
            "organizations-page": LocalJSX.OrganizationsPage & JSXBase.HTMLAttributes<HTMLOrganizationsPageElement>;
            "page-root": LocalJSX.PageRoot & JSXBase.HTMLAttributes<HTMLPageRootElement>;
            "people-table": LocalJSX.PeopleTable & JSXBase.HTMLAttributes<HTMLPeopleTableElement>;
            "role-column-grants": LocalJSX.RoleColumnGrants & JSXBase.HTMLAttributes<HTMLRoleColumnGrantsElement>;
            "role-memberships": LocalJSX.RoleMemberships & JSXBase.HTMLAttributes<HTMLRoleMembershipsElement>;
            "role-table-permissions": LocalJSX.RoleTablePermissions & JSXBase.HTMLAttributes<HTMLRoleTablePermissionsElement>;
            "roles-page": LocalJSX.RolesPage & JSXBase.HTMLAttributes<HTMLRolesPageElement>;
            "roles-table": LocalJSX.RolesTable & JSXBase.HTMLAttributes<HTMLRolesTableElement>;
            "sc-languages": LocalJSX.ScLanguages & JSXBase.HTMLAttributes<HTMLScLanguagesElement>;
            "scripture-references": LocalJSX.ScriptureReferences & JSXBase.HTMLAttributes<HTMLScriptureReferencesElement>;
            "table-root": LocalJSX.TableRoot & JSXBase.HTMLAttributes<HTMLTableRootElement>;
        }
    }
}
